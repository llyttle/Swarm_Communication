#include <SPI.h>  // File Write method for SD Card
#include <SD.h> // SD Card library

// Libraries for ICM20948 Accelerometer
#include <Adafruit_ICM20X.h>
#include <Adafruit_ICM20948.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

Adafruit_ICM20948 icm;  // Setup icm object
uint16_t measurement_delay_us = 65535; // Delay between measurements for testing
// For SPI mode, we need a CS pin
#define ICM_CS 8
// For software-SPI mode we need SCK/MOSI/MISO pins
#define ICM_SCK 13
#define ICM_MISO 12
#define ICM_MOSI 11

#define SD_CS 10 // Pin for SD chip select (connect to CS on chip)

#define buzzPin 5  // PWM pin for Vibration motor control
#define buttonPin 7  // Digital read pin for button reading
//#define chunk 16  // number of readings before writing to SD card
bool buttonState = LOW;  // Set initial state as BUTTON OFF
bool lastState = LOW; // state used to detect button edge cases

uint8_t counter = 0;  // counter used for ramping motor

//struct Datastore {
//  uint8_t x;
//};
//
//Datastore myData[chunk];

File dataFile;

void setup() {
  Serial.begin(115200);
  while (!Serial)
    delay(10); // will pause arduino until serial console opens

  pinMode(ICM_CS, INPUT);
  pinMode(SD_CS, INPUT);

  SPI.begin();

  Serial.print(F("Initializing SD card..."));
  // Wait to find SD reader
  if (!SD.begin(SD_CS)) {
    Serial.println(F("Card failed, or not present"));
    return;
  }
  Serial.println(F("CARD INITIALIZED"));

  Serial.print(F("Initializing Accelerometer..."));
  // Wait to find Accelerometer
  if (!icm.begin_SPI(ICM_CS)) {
    Serial.println(F("Failed to find ICM20948 chip"));
    return;
  }
  Serial.println(F("ICM20948 INITIALIZED"));

  Serial.print(F("Accelerometer range set to: "));
    switch (icm.getAccelRange()) {
    case ICM20948_ACCEL_RANGE_2_G:
      Serial.println(F("+-2G"));
      break;
    case ICM20948_ACCEL_RANGE_4_G:
      Serial.println(F("+-4G"));
      break;
    case ICM20948_ACCEL_RANGE_8_G:
      Serial.println(F("+-8G"));
      break;
    case ICM20948_ACCEL_RANGE_16_G:
      Serial.println(F("+-16G"));
      break;
    }

  uint16_t accel_divisor = icm.getAccelRateDivisor();
  float accel_rate = 1125 / (1.0 + accel_divisor);

  pinMode(buzzPin, OUTPUT);
  pinMode(buttonPin, INPUT);

  analogWrite(buzzPin, 0);  // Turn Vibration motor OFF
  
  Serial.println(F("Press Button to start logging data"));
}

void loop() {
  getButtonState(buttonPin);
  
  if (buttonState == HIGH){
//    Buzz(counter);
    
    Serial.println(FreeRam());  // Uncomment to check if dynamic memory is large enough for writing (between 300-400 bytes)
    
    dataFile = SD.open("Acc_Test.txt", FILE_WRITE); // open SD card as file. ONLY ONE CAN BE OPEN AT A TIME.
    if (dataFile){
      Serial.println(F("Found dataFile"));
//      for (uint8_t i=0; i<16; i++){
//        myData[i].x = getAccel();
//      }
  
//      dataFile.println(getAccel());
      dataFile.close();
    }

    else Serial.println(F("No dataFile"));
    
//    counter ++;     // TODO: switch counter to timer so change in amplitude is not dependent on program speed.
//    if (counter == 255) counter = 0;
    delay(100);
  }
}

void Buzz(int x){
  int duty = -127*(cos(.0246*x)+1);
  analogWrite(buzzPin, x);
}

int getAccel(){
  sensors_event_t accel;
  sensors_event_t gyro;
  sensors_event_t mag;
  sensors_event_t temp;
  icm.getEvent(&accel, &gyro, &temp, &mag);

  return accel.acceleration.z;
}

void getButtonState(int pin){
  bool currentState = digitalRead(pin);
  if (currentState != lastState && currentState == HIGH){
    if (buttonState == LOW){
      buttonState = HIGH;
      counter = 0;
      Serial.println(F("======================"));
      Serial.println(F("Collecting Data..."));
    }
    else{
      buttonState = LOW;
      analogWrite(buzzPin, 0);
      Serial.println(F("Stopped Collecting"));
      delay(1000);
//      Serial.write(dataFile.read((uint8_t *)&data, sizeof(data)));
    }
  }
  lastState = currentState;
}
