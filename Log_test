#include <SPI.h>  // File Write method for SD Card
#include <SD.h> // SD Card library

// Libraries for ICM20948 Accelerometer
#include <Adafruit_ICM20X.h>
#include <Adafruit_ICM20948.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

Adafruit_ICM20948 icm;  // Setup icm object
uint16_t measurement_delay_us = 65535; // Delay between measurements for testing
// For SPI mode, we need a CS pin
#define ICM_CS 8
// For software-SPI mode we need SCK/MOSI/MISO pins
#define ICM_SCK 13
#define ICM_MISO 12
#define ICM_MOSI 11

#define SD_CS 10 // Pin for SD chip select (connect to CS on chip)

#define buzzPin 5  // PWM pin for Vibration motor control
#define buttonPin 2  // Digital read pin for button reading
bool buttonState = LOW;  // Set initial state as BUTTON OFF
bool lastState = LOW; // state used to detect button edge cases

uint8_t counter = 0;  // counter used for ramping motor 

void setup() {
  Serial.begin(115200);
  while (!Serial)
    delay(10); // will pause arduino until serial console opens

//  pinMode(ICM_CS, OUTPUT);
//  pinMode(SD_CS, OUTPUT);

//  SPI.begin();

//  digitalWrite(SD_CS, LOW);
  Serial.print("Initializing SD card...");
  // Wait to find SD reader
  if (!SD.begin(SD_CS)) {
    Serial.println("Card failed, or not present");
    // don't do anything more:
    //while (1) delay(10);
    return;
  }
  Serial.println("CARD INITIALIZED");
  digitalWrite(SD_CS, HIGH);

//  digitalWrite(ICM_CS, LOW);
  Serial.print("Initializing Accelerometer...");
  // Wait to find Accelerometer
  if (!icm.begin_SPI(ICM_CS, ICM_SCK, ICM_MISO, ICM_MOSI)) {
    Serial.println("Failed to find ICM20948 chip");
    // don't do anything more:
    //while (1) delay(10);
    return;
  }
  Serial.println("ICM20948 INITIALIZED");
//  digitalWrite(ICM_CS, HIGH);

  Serial.print("Accelerometer range set to: ");
    switch (icm.getAccelRange()) {
    case ICM20948_ACCEL_RANGE_2_G:
      Serial.println("+-2G");
      break;
    case ICM20948_ACCEL_RANGE_4_G:
      Serial.println("+-4G");
      break;
    case ICM20948_ACCEL_RANGE_8_G:
      Serial.println("+-8G");
      break;
    case ICM20948_ACCEL_RANGE_16_G:
      Serial.println("+-16G");
      break;
    }

  uint16_t accel_divisor = icm.getAccelRateDivisor();
  float accel_rate = 1125 / (1.0 + accel_divisor);
  
  pinMode(buzzPin, OUTPUT);
  pinMode(buttonPin, INPUT);

  analogWrite(buzzPin, 0);  // Turn Vibration motor OFF

  Serial.println("Press Button to start logging data");
  Serial.println();
}

void loop() {
  getButtonState(buttonPin);
  
  if (buttonState == HIGH){
//    Buzz(counter);

    Serial.println(getAccel());
    
//    WriteSD(acceleration);
    
    counter ++;     // TODO: switch counter to timer so change in amplitude is not dependent on program speed.
    if (counter == 255) counter = 0;
    delay(100);
  }
}

void WriteSD(int data){
  Serial.println(data);
//  if (dataFile){
//    dataFile.println(data);
//    
//  }
}

void Buzz(int x){
  int duty = -127*(cos(.0246*x)+1);
  analogWrite(buzzPin, x);
}

float getAccel(){
  sensors_event_t accel;
  sensors_event_t gyro;
  sensors_event_t mag;
  sensors_event_t temp;
  icm.getEvent(&accel, &gyro, &temp, &mag);

  return accel.acceleration.z;
}

void getButtonState(int pin){
  bool currentState = digitalRead(pin);
  if (currentState != lastState && currentState == HIGH){
    if (buttonState == LOW){
      buttonState = HIGH;
//      File dataFile = SD.open("Accelerometer_Test", FILE_WRITE) // open SD card as file. ONLY ONE CAN BE OPEN AT A TIME.
      counter = 0;
      Serial.println("======================");
      Serial.println("Collecting Data...");
    }
    else{
      buttonState = LOW;
//      dataFile.close();
      analogWrite(buzzPin, 0);
      Serial.println("Stopped Collecting");
    }
  }
  lastState = currentState;
}
